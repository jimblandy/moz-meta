#!/usr/bin/env bash

set -eu

u="Build SpiderMonkey, and symlink obj~ to the build directory.
By default, build in 'obj-debug'.

Some flags pass specific flags through to configure, and add a suffix to the
build dir name. These can be combined.

build-shell     enables/affects                         build suffix
-----------     ---------------                         ------------
--ctypes        JS CTypes support                       ct
--nojemalloc    disables using jemalloc                 nj
--treenspr      use the in-tree NSPR                    nspr
--more-deterministic  slow deterministic code           det

--novalgrind    disables valgrind support               novg
--coverage      code coverage instrumentation           cov
--perf          Linux perf JIT mapping                  perf
--asan          address sanitizer                       asan

--m32           32-bit build                            32
--optimize      optimized build                         opt
--nodebug       un-optimized, without DEBUG #defined    nodebug
--optdebug      optimized, with DEBUG #defined          optdebug
--nounified     disable unified compilation             uni"
eval "$(args "$0" -f ctypes nojemalloc treenspr more-deterministic novalgrind coverage perf asan m32 optimize nodebug optdebug nounified -k cd -u "$u" -- "$@")"

if [ "${cd+set}" = set ]; then
    case "$cd" in
        # Make it easier to edit a make command into a moz build-shell
        # command, by accepting js/src build directories.
        *"/obj~")
            cd $cd/..
            ;;
        *)
            cd $cd
            ;;
    esac
fi

if [ ! -f jsapi.cpp ]; then
   echo "Can't find jsapi.cpp in current directory.  Run in js/src." >&2
   exit 1
fi

coverage_flags=
jemalloc_flags=
perf_flags=
target_flags=
unified_flags=
deterministic_flags=
asan_flags=

name_suffix=

autotmp=moz-build-shell-autoconf-temp
trap "rm -f $autotmp" EXIT
regenerate_configure() {
    autoconf-2.13 "$1" > "$autotmp"
    mv "$autotmp" "${1%.in}"
    chmod +x "${1%.in}"
}

regenerate_configure configure.in
regenerate_configure old-configure.in

config=$PWD/build-shell.mozconfig-$$
trap "rm -f '$config'" EXIT
exec {cfd}> $config
echo "# Generated by $0" >&$cfd
echo "../configure \\" >&$cfd

cfg() {
    echo "$@" "\\" >&$cfd
}

if $coverage; then
    coverage_flags='--coverage'
    name_suffix="${name_suffix}cov"
fi

if $optimize; then
    cfg "--enable-optimize${coverage_flags:+='${coverage_flags}'}"
    base_name=opt
elif $optdebug; then
    cfg "--enable-debug --enable-optimize${coverage_flags:+='${coverage_flags}'}"
    base_name=optdebug
elif $nodebug; then
    cfg "--disable-optimize"
    export CXXFLAGS='-g3 -O0'
    base_name=nodebug
else
    cfg "--enable-debug='-g3 -O0${coverage_flags} -fno-inline' --disable-optimize"
    base_name=debug
fi

cfg "--without-intl-api"
cfg "--enable-oom-breakpoint"

if $m32; then
    export PKG_CONFIG_LIBDIR=/usr/lib/pkgconfig CC="gcc -m32" CXX="g++ -m32" AR=ar
    cfg "'--target=i686-pc-linux'"
    name_suffix="${name_suffix}32"
fi

if $treenspr; then
    build="$(find-build)"
    if ! [ -f "$build/dist/include/nspr/pratom.h" ]; then
        echo "--treenspr builds require an NSPR build in a subdir of the mozilla source root." >&2
        exit 1
    fi
    cfg "--with-nspr-cflags='-I$build/dist/include/nspr'"
    cfg "--with-nspr-libs='$build/dist/lib/libnspr4.a $build/dist/lib/libplds4.a $build/dist/lib/libplc4.a'"
    name_suffix="${name_suffix}nspr"
else
    cfg "--with-system-nspr"
fi

if $novalgrind; then
    name_suffix="${name_suffix}novg"
else
    cfg "--enable-valgrind --enable-callgrind"
fi

if $ctypes; then
    cfg "--enable-ctypes"
    name_suffix="${name_suffix}ct"
fi

if $perf; then
    cfg "--enable-perf"
    name_suffix="${name_suffix}perf"
fi

if $nounified; then
    cfg "--disable-unified-compilation"
    name_suffix="${name_suffix}uni"
fi

if $nojemalloc; then
    cfg "--disable-jemalloc"
    name_suffix="${name_suffix}nj"
fi

if $asan; then
    cfg "--enable-address-sanitizer"
    name_suffix="${name_suffix}asan"
fi

if $more_deterministic; then
    cfg "--enable-more-deterministic"
    name_suffix="${name_suffix}det"
fi

exec {cfd}>&-

build_dir="obj-${base_name}${name_suffix}"
rm -rf "$build_dir"
mkdir "$build_dir"

rm -f obj~
ln -s "$build_dir" obj~

if ! [ -d obj~/. ]; then
    echo "failed to create obj~ subdir" >&2
    exit 1
fi

set -x
cd obj~
. "$config"
make -s -j8
